name: Rust Linux

on: [push, pull_request]

env:
  deb_packages: >-
    capnproto
    libclang-dev
    libevdev-dev
    libudev-dev
    libwayland-dev
    libxcb-xkb-dev
    libxkbcommon-dev
    libxkbcommon-x11-dev
    libxtst-dev
    llvm
    ninja-build
  mingw_w64_packages: >-
    mingw-w64
    wine-stable
    wine-binfmt

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ env.deb_packages }}
      - uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ env.deb_packages }}
          python -m pip install --upgrade pip
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all
      - name: Lint with flake8
        working-directory: ./python
        run: |
          python -m pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --max-complexity=10 --max-line-length=127 --statistics
      - name: Install pycapnp dependencies and run test
        working-directory: ./python
        run: |
          python -m pip install cython
          CXXFLAGS=-fPIC CFLAGS=-fPIC python -m pip install -r requirements.txt
          python -m pytest -vvv

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ env.deb_packages }}
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: --path . --bins --examples --root dist
      - uses: actions/upload-artifact@v1.0.0
        with:
          name: linux_release_binaries
          path: dist/bin

  lib_build:
    name: Lib Build (hidapi)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ env.deb_packages }}
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --no-default-features --features "hidapi-devices"

  mingw_w64build:
    name: mingw-w64 Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ env.deb_packages }}
          sudo apt-get install -y ${{ env.mingw_w64_packages }}
      - uses: actions-rs/cargo@v1
        with:
          command: test

  hid-io-protocol_builddevice:
    name: hid-io-protocol Device Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path hid-io-protocol/Cargo.toml --no-default-features --features device --release

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ env.deb_packages }}
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets -- -D warnings
